---
title: "Multi-Species Integrated Species Distribution Modeling Workshop"
author: "Ron R Togunov, Philip Mostert, Bob O'Hara"
date: "`r Sys.Date()`"
bibliography: '`r system.file("References.bib", package="PointedSDMs")`'
biblio-style: authoryear
format: html
---

# Introduction

Multi-species integrated Species Distribution Models (iSDMs) offer powerful tools for ecological analysis. These models allow us to simultaneously analyze multiple species, potentially improving our understanding of species distributions and the factors that influence them. By default, these models share range, standard deviation, and precision parameters across species, which can lead to more robust estimates, especially for rare species or those with limited data. Additionally, this approach can help in correcting for sampling bias, a common issue in ecological data collection.

This workshop aims to guide you through the process of setting up and interpreting multi-species iSDMs using the `PointedSDMs` package. We'll explore various modeling approaches and discuss their ecological implications.

# *Setophaga* example
## Data Preparations

We will use the same data as in the previous vignette with three species (*Setophaga fusca*, *Setophaga caerulescens*, and *Setophaga magnolia*) obtained from three datasets (eBird, BBS, and BBA) as well as two covariates (elevation and canopy cover).

First, let's load the required packages and prepare our data:

```{r Load packages, echo = F, warning = F, message = F}
## Load required packages
library(PointedSDMs) # devtools::install_github('PhilipMostert/PointedSDMs')
library(INLA)
library(terra)
library(tidyverse)
library(viridis)
library(here)
library(patchwork)
library(geometry)
library(Matrix)
library(tidyterra)

# Load and prepare data
proj <- "+proj=utm +zone=17 +datum=WGS84 +units=km"
PA <- readRDS(here('Data/PA.rds')) %>% st_transform(proj)
SetophagaData_full <- readRDS(here("Data/Vignette_setophaga/SetophagaData.rds"))
covariates <- scale(terra::rast(system.file('extdata/SetophagaCovariates.tif', package = "PointedSDMs")))
names(covariates) <- c('elevation', 'canopy')

# Create mesh
mesh <- inla.mesh.2d(boundary = inla.sp2segment(PA), 
                     cutoff = 10 * 5,
                     max.edge = c(1, 1.24) * 40,
                     offset = c(0.05, 0.4) * 100,
                     crs = st_crs(proj))
```

To speed things up for the workshop, we will model just two of the three species.

```{r filterVignetteSpecies}
SetophagaData <- map(SetophagaData_full, \(.x) filter(.x, Species_name %in% c("Setophaga_caerulescens", "Setophaga_magnolia")))
```

## Building the Multi-Species Model

Now that we've prepared our data, we're ready to set up our multi-species model. One of the key decisions we have to make is in what information is shared across species (i.e., what parameters are shared among the species). Specifically, if our species $i$ intensity field $\lambda_s(\bf{s})$ is defined as:

$$
\lambda_i(\bf{s}) = \alpha_i + \zeta_i(\bf{s}) \\
\zeta_i(\bf{s}) \sim N(0, \sigma_i^2),
$$

where $\zeta_i(\bf{s})$ is a species level spatial effect with covariance matrix $\sigma^2_i$. We can share information in 3 ways using the argument `speciesSpatial`:

-   **`"share"`** share everything: $\zeta_i(\bf{s}) = \zeta(\bf{s})$, in which the random field is the same across all species.
-   **`"replicate"`** share only the hyper-parameters: $\sigma_i^2 = \sigma^2$, in which the intensities of the random field are different but the hyperparameters (i.e., range and sigma) are different.
-   **`"copy"`** share nothing: $\zeta_i(\bf{s})$ and $\sigma_i^2$ are all different, in which the both the intensities and the hyperparameters are independent across species. 

### Shared spatial effect: `speciesSpatial = "shared"` 

We use the `startSpecies()` to initialise the multi-species ISDM. Many of the arguments are the same as in the `startISDM()` we used in the previous vignette. Additional arguments include: `speciesIntercept` to control the intercept for the species, `speciesEnvironment` to control the environmental effects for the species (species-specific effects or shared across species), and `speciesSpatial` to control what information in the spatial effect is shared across species.  

The simplest model we can construct assumes that all species occurrence emerge from a common distribution. This is achieved by defining the `speciesSpatial` argument as `"shared"`:

```{r init Shared Mod}
speciesModelShared <- startSpecies(SetophagaData, Boundary = PA, 
                                   Projection = proj, Mesh = mesh,
                                   responsePA = 'NPres', 
                                   trialsPA = 'Trials',
                                   spatialCovariates = covariates, 
                                   speciesName = 'Species_name',
                                   pointsSpatial = NULL, # Do not include a dataset spatial field
                                   speciesSpatial = "shared")   # unique spatial field per species

```

We've also set `pointsSpatial = NULL` to simplify the model by not including dataset-specific spatial effects.

#### Model Specification

Again, the output of `speciesSpatial()` is an *R6* object, for which we can use the `?.$help()` slot function to view the other available slot functions and their documentationp

```{r species help, eval = FALSE}
speciesModelShared$help()
```

Plotting the multi-species model, shows the distribution by species rather than by dataset as in the previous vignette.

```{r dataset plot}
#| fig.width: 8 
#| fig.height: 5
speciesModelShared$plot() +
  theme_bw() +
  ggtitle('Plot of the species') + 
  theme(plot.title = element_text(hjust = 0.5))
```

The resulting plot shows the distribution of observations for each species. This gives us a first look at the data and can help identify potential sampling biases or differences in species ranges.

As in the single-species model from the previous vignette, we can specify the priors for the fixed and random effects using `.$specifySpatial` , `.$priorsFixed` and `.$specifyRandom`. In `.$specifyRandom`, the argument `speciesGroup` is used to change the prior for the precision (inverse variance) of group model for the spatial effects, and `speciesIntercepts` is used to change the prior for the precision for the random intercept term. For both of these parameters, we choose *pc priors.*

```{r specify shared mod priors}
# hyper parameters of the spatial field (shared across species)
speciesModelShared$specifySpatial(Species = TRUE,  # define same prior for the all species
                                  prior.sigma = c(1, 0.1),  # SD of field variation; P(σ > σ0)
                                  prior.range = c(15, 0.1))  # range of spatial correlation; P(ρ < ρ0)

# prior for intercept of datasets (common for all datasets and all species in the model)
speciesModelShared$priorsFixed(Effect = 'Intercept',
                               mean.linear = 0, 
                               prec.linear = 0.1)

# prior for random effects (mesh nodes of spatial field and species intercepts)
speciesModelShared$specifyRandom(
  # precision parameter on how much each species' spatial field (how much they can deviate from the shared ___)
  speciesGroup = list(model = "iid", 
                      hyper = list(prec = list(prior = "pc.prec",
                                               param = c(0.1, 0.1)))),  # P(σ > σ0)
  # precision parameter on the baseline species occurrence rate
  speciesIntercepts = list(prior = 'pc.prec',
                           param = c(0.1, 0.1)))  # P(σ > σ0)

```

Now, we can specify model options and fit the model:

```{r fit shared mod}
modelOptions <- list(control.inla = list(int.strategy = 'eb', diagonal = 0.1, cmin = 0), 
                     verbose = FALSE, safe = TRUE)

# Species-specific spatial effects model
speciesSharedEst <- fitISDM(data = speciesModelShared, options = modelOptions)

# View summary of the estimated model
summary(speciesSharedEst)
```

#### Examining Species-Specific Responses

Let's look at how different species respond to environmental covariates:

```{r shared mod plot cov est}
# Extract fixed effects
fixed_effects <- speciesSharedEst$summary.fixed

# Plot species-specific responses to elevation
ggplot(fixed_effects[grep("elevation", rownames(fixed_effects)),], 
       aes(x = rownames(fixed_effects)[grep("elevation", rownames(fixed_effects))], 
           y = mean, ymin = `0.025quant`, ymax = `0.975quant`)) +
  geom_pointrange() +
  coord_flip() +
  labs(x = "Species", y = "Effect of Elevation", 
       title = "Species-Specific Responses to Elevation")
```

We can plot the predict and plot the spatial field Predictions as follows:

```{r shared mod pred spat}
speciesSharedPredSpat <- predict(speciesSharedEst,
                                 data = fm_pixels(mesh = mesh,
                                                  mask = PA),
                                 spatial = TRUE,
                                 n.samples = 100)

plot(speciesSharedPredSpat, variable = c('mean'))
```

The covariate effects can also be plotted separately as follows:
```{r shared mod pred cov}
speciesSharedPredCov <- predict(speciesSharedEst,
                                data = fm_pixels(mesh = mesh,
                                                 mask = PA),
                                spatial = FALSE,
                                covariates = speciesSharedEst$spatCovs$name,
                                n.samples = 100)
plot(speciesSharedPredCov, variable = c('mean'))
```

Alternatively, we can predict the spatial and covariate effects together as follows:
```{r shared mod pred spatCov}

speciesSharedPredSpatCov <- predict(speciesSharedEst,
                                    data = fm_pixels(mesh = mesh,
                                                     mask = PA),
                                    predictor = TRUE,
                                    n.samples = 100)
# # or equivalently:
# speciesSharedPredSpatCov <- predict(speciesSharedEst,
#                               data = fm_pixels(mesh = mesh,
#                                                mask = PA),
#                               spatial = TRUE,
#                               covariates = speciesSharedEst$spatCovs$name,
#                               n.samples = 100)
plot(speciesSharedPredSpatCov, variable = c('mean'))
```

This shared approach can be particularly useful when species are expected to respond similarly to underlying environmental gradients, or when data for some species is limited. It is also computationally the fastest as there are fewer parameters being estimated.

### Shared hyperparameters: `speciesSpatial = "replicate"` 

The next up is allowing each species to have their own spatial fields and intercepts, but share their hyperparameters (i.e., range and sigma). We achieve this by defining the `speciesSpatial` argument as 
`replicate`. This also happens to be the default for `startSpecies()` (i.e., when `speciesSpatial` is not explicitly defined). This approach allows for species-specific spatial patterns while still borrowing strength across species regarding the structural heterogeneity in the spatial field.

```{r replicate mod init}
speciesModelReplicate <- startSpecies(SetophagaData, Boundary = PA, 
                                      Projection = proj, Mesh = mesh,
                                      responsePA = 'NPres', 
                                      trialsPA = 'Trials', 
                                      spatialCovariates = covariates, 
                                      speciesName = 'Species_name',
                                      pointsSpatial = NULL, # Do not include a dataset spatial field
                                      speciesSpatial = "replicate")  # unique spatial field per species
```

Specify priors for spatial and random effects:

```{r replicate mod spec priors}
# hyper parameters of the spatial field (shared across species)
speciesModelReplicate$specifySpatial(Species = TRUE,  # define same prior for the all species
                                     prior.sigma = c(1, 0.1),  # SD of field variation; P(σ > σ0)
                                     prior.range = c(15, 0.1))  # range of spatial correlation; P(ρ < ρ0)

# prior for intercept of datasets (common for all datasets and all species in the model)
speciesModelReplicate$priorsFixed(Effect = 'Intercept',
                                  mean.linear = 0, 
                                  prec.linear = 0.1)

# prior for random effects (mesh nodes of spatial field and species intercepts)
speciesModelReplicate$specifyRandom(
  # precision parameter on how much each species' spatial field (how much they can deviate from the shared ___)
  speciesGroup = list(model = "iid", 
                      hyper = list(prec = list(prior = "pc.prec",
                                               param = c(0.1, 0.1)))),  # P(σ > σ0)
  # precision parameter on the baseline species occurrence rate
  speciesIntercepts = list(prior = 'pc.prec',
                           param = c(0.1, 0.1)))  # P(σ > σ0)
```

Now, we can specify model options and fit the model:

```{r replicate mod fit}
# Species-specific spatial effects model
speciesReplicateEst <- fitISDM(data = speciesModelReplicate, options = modelOptions)

# View summary of the estimated model
summary(speciesReplicateEst)
```

We can predict and plot the spatial field Predictions as follows:

```{r replicate mod pred spat}
speciesReplicatePredSpat <- predict(speciesReplicateEst,
                                    data = fm_pixels(mesh = mesh,
                                                     mask = PA),
                                    spatial = TRUE,
                                    n.samples = 100)

plot(speciesReplicatePredSpat, variable = c('mean'))
```

As we are primarily changing the structure of the spatial field, we will not plot covariate effects for this example. 

### Independent spatial field: `speciesSpatial = "copy"` 

Finally, we'll implement a `copy` model, where the spatial field and its hyperparameters are estimated separately for each species. The **`"copy"`** approach can be particularly useful when you expect species to have distinct spatial patterns, but you want to ensure consistency in how these patterns are estimated across different datasets. While this gives the model the maximum amount of flexibility, it comes at the expenese of computation time -- especially as the number of species greatly increases.

```{r copy mod init}
speciesCopyModel <- startSpecies(SetophagaData, Boundary = PA, 
                                 Projection = proj, Mesh = mesh,
                                 responsePA = 'NPres', 
                                 trialsPA = 'Trials', 
                                 spatialCovariates = covariates, 
                                 speciesName = 'Species_name',
                                 pointsSpatial = NULL,# Do not include a dataset spatial field
                                 speciesSpatial = "copy")   # unique spatial field per species

```

Update and fit the model:

```{r copy mod spec priors & fit}
# hyper parameters of the spatial field (shared across species)
speciesCopyModel$specifySpatial(Species = TRUE,  # define same prior for the all species
                                prior.sigma = c(1, 0.1),  # SD of field variation; P(σ > σ0)
                                prior.range = c(15, 0.1))  # range of spatial correlation; P(ρ < ρ0)

# prior for intercept of datasets (common for all datasets and all species in the model)
speciesCopyModel$priorsFixed(Effect = 'Intercept',
                             mean.linear = 0, 
                             prec.linear = 0.1)

# prior for random effects (mesh nodes of spatial field and species intercepts)
speciesCopyModel$specifyRandom(
  speciesGroup = list(model = "iid", 
                      hyper = list(prec = list(prior = "pc.prec",
                                               param = c(0.1, 0.1)))),  # P(σ > σ0)
  # precision parameter on the baseline species occurrence rate
  speciesIntercepts = list(prior = 'pc.prec',
                           param = c(0.1, 0.1)))  # P(σ > σ0)

# Species-specific spatial effects model
speciesCopyEst <- fitISDM(data = speciesCopyModel, options = modelOptions)

# View summary of the estimated model
summary(speciesCopyEst)
```

View results (again, only the spatial field):

```{r copy mod predict}
# generate prediction
speciesCopyPredSpat <- predict(speciesCopyEst,
                               data = fm_pixels(mesh = mesh,
                                                mask = PA),
                               spatial = TRUE,
                               n.samples = 100)

plot(speciesCopyPredSpat, variable = c('mean'))
```

# Species-specific covariate effects

In some instance, we may want to include different environmental covariates for different species. This may be desired if some covariates are only applicable for some of the species or to test competing hypotheses. 

In our case, given the similarity of the species and the covariates we have available, there likely isn't a good reason for including different species-specific covariates. However, just for illustration, we will fit a model where both species have an effect of elevation, but only *Setophaga caerulescens* will have an effect of canopy cover. This can be achieved by removing the *Setophaga caerulescens* canopy cover component of the model using the `$changeComponents()` slot function. We can see the components currently in the model by running `$changeComponents()` without specifying any arguments:

```{r species-spec view comps}
speciesSpecCovModel <- speciesModelReplicate  # make a copy to retain original model
speciesSpecCovModel$changeComponents()  # view available components
```

Now, we can remove any components that we don't want to include in the model -- in this case the effect of canopy cover on on *Setophaga magnolia*, which we can see from above has been named `Setophaga_magnolia_canopy()`. We can remove this component by defining it as the `removeComponent` argument in `$changeComponents()` as follows:

```{r species-spec remove comp}
speciesSpecCovModel$changeComponents(removeComponent = "Setophaga_magnolia_canopy")
```
You should see above that the `Setophaga_magnolia_canopy` component has been removed from the model. 

As we are using the previously defined `speciesModelReplicate` model, the priors are already specified in the model, so we can simply fit it and examine the results:

```{rspecies-spec fit}
# Fit the model
speciesSpecCovEst <- fitISDM(data = speciesSpecCovModel, 
                             options = modelOptions)

# Examine the results
summary(speciesSpecCovEst)
```

Pay particular attention to the coefficients for the canopy cover. You should see effects for *S. caerulescens* but not for *S. magnoli*. 

This approach allows us to incorporate species-specific ecological knowledge into our multi-species model, potentially improving its biological realism and predictive power while reducing overfitting by leveraging prior knowledge.

# Bias Correction

As in the previous vignette, we can estimate a bias field for datasets that may have significant bias such as eBird. The estimation of this should be significantly better in the multi-species model compared to the independent models as we are leveraging observations across species to estimate a common bias field. As before, the dataset bias field can be specified using the `$addBias()` slot function.

```{r bias mod specify & fit & pred spat}
# Add bias field to eBird data
speciesModelReplicate$addBias(datasetNames = 'eBird')
speciesModelReplicate$specifySpatial(Bias = TRUE, 
                                     prior.sigma = c(0.1, 0.1),
                                     prior.range = c(15, 0.1))

# Fit model with bias correction
biasEst <- fitISDM(data = speciesModelReplicate, options = modelOptions)

# Make predictions
BiaspredSpatial <- predict(biasEst,
                     data = fm_pixels(mesh = mesh, mask = PA),
                     spatial = TRUE,
                     n.samples = 100)

# Compare predictions
plot(speciesReplicatePredSpat)
plot(BiaspredSpatial)
```

These plots allow us to compare predictions with and without bias correction. Look for areas where the predictions differ significantly, as these may indicate regions where sampling bias has a strong influence on the model.

We expect the citizen science data (i.e., eBird) to be highly correlated with population density. We can check whether the model identified that pattern by predicting the estimated bias field alone using the argument `bias = TRUE` in the `predict` function.

```{r bias mod pred bias}
# predict just the bias field
biasPredBias <- predict(biasEst,
                      data = fm_pixels(mesh = mesh, mask = PA),
                      bias = TRUE,
                      n.samples = 100)
# generate map of the estimated eBird dataset bias
plot_eBird_bias <- plot(biasPredBias) + 
  labs(title = "Prediction of mean for\neBird_biasField bias field")
```

Now, we will import population density data downloaded plot/compare this with the estimated eBird bias.

```{r bias mod plot bias & popden}
pa_pop <- st_read(here("Data/Vignette_setophaga/PA_pop_density.shp"))

# map log population density
plot_pap_pop <- ggplot(pa_pop) +
  geom_sf(aes(fill = density), color = NA, size = 0.2) +
  scale_fill_viridis(
    trans = "log",
    name = "Population/nper sq km"
  ) + 
  labs(title = "Population density")

# plot together
plot_eBird_bias + plot_pap_pop
```

This plot shows the estimated spatial pattern of bias in the eBird data. Areas with higher values indicate regions where eBird data might over represent species occurrences due to increased sampling effort or other biases. By comparing these plots, we can see how well the estimated bias field corresponds to human population density. This can help validate our bias correction and provide insights into the spatial patterns of sampling effort in citizen science data.

# Supplementary activities

In this workshop, we've explored various ways of specifying multi-species models, sharing different parts of the spatial field or covariates, estimating sampling biases, and generating different predictions maps. The following supplementary activities explore some of these themes in greater depth.

## Compare models Predict distribution

Given the many ways of specifying models for the same data, we may need to test competing models to identify the most parsimonious ones. This can be done using the model deviance information criterion (**DIC**). DIC is often preferred over Akaike information criterion (AIC) in Bayesian hierarchical models as it also accounts for the posterior distribution of the parameters. Similar to AIC, lower values are better -- the common rule of thumb that a difference ($\delta$DIC) of <2 is considered indicating minimal evidence that the model with lower DIC is better, $\delta$DIC 2-5 suggests moderate evidence, and $\delta$DIC >5 is considered substantial evidence. We can extract a fitted model's DIC as follows:

```{r}
# Compare models
speciesSharedEst$dic$dic
speciesReplicateEst$dic$dic
```
Importantly, we can only compare DIC values for models with the same observation data and the same mesh. 

Can you extract the DIC values for the other fitted models? Which model is preferred and why?

## Model predictions

In the **Examining Species-Specific Responses** section of the **Shared spatial effect** model, we predicted and mapped the combined covariate effects by specifying all the covariates for the argument `covariates = speciesSharedEst$spatCovs$name`. If we define the `covariates` argument as any subset of the used spatial covariates, we can explore any specific covariates effects separately as desired. Can you modify the following code to predict effect of one of the covariates in one of the models? 
```{r shared mod pred exercise, eval=FALSE}
fittedModel <- ???
modelPred <- predict(fittedModel,
                     data = fm_pixels(mesh = mesh, mask = PA),
                     spatial = FALSE,
                     covariates = ???,
                     n.samples = 100)
plot(modelPred, variable = c('mean'))
```

## Mesh specification and covariate interpolation

The definition of a mesh can have a big effect on model performance. Most importantly, the scale and resolution of the mesh need to be fine enough to capture the variation and structure in the distribution of the focal species. In addition to this, if you have presence-only data, it also needs to be fine enough to capture the structure and variation of the spatial covariates. This is because from the perspective of the model, it only 'sees' the covariates at the observed points and the mesh nodes, and it is assumed that all locations between mesh nodes can be approximated using linear interpolation. If the heterogeneity of the covariates occur at a significantly finer scale than the mesh nodes, there could be a significant mismatch between the true covariate map and the one assumed by the model. Therefore, it's crucial to understand how our environmental covariates are represented across the study area and how they appear through the mesh. 

The following code creates visualizations of our elevation and canopy cover data:

```{r visualise cov interpolation}
# Covariate raster aggregation
aggregationFactor <- 1  
# define mesh
testMesh <- inla.mesh.2d(boundary = inla.sp2segment(PA), 
                         max.edge = c(1, 1.24) * 40,
                         cutoff = 10 * 10,
                         offset = c(0.05, 0.4) * 100,
                         crs = st_crs(proj))

## extract and interpolate covariates
{
  # project covs to project proj
  covs <- project(aggregate(covariates, fact = aggregationFactor, fun="mean", na.rm = TRUE), proj)
  
  # Extract mesh vertices
  vertices <- as.data.frame(testMesh$loc[, 1:2])
  colnames(vertices) <- c("x", "y")
  # Assuming your covariates are stored in a SpatRaster object named `covariates`
  elevation_values <- terra::extract(covs[["elevation"]], vertices)
  canopy_values <- terra::extract(covs[["canopy"]], vertices)
  
  # Combine the vertex coordinates with the extracted values
  vertices$elevation <- elevation_values[, 2]
  vertices$canopy <- canopy_values[, 2]
  # Convert vertices to an sf object
  vertices_sf <- st_as_sf(vertices, coords = c("x", "y"), crs = st_crs(covariates))
  
  # Get the triangles of the mesh
  triangles <- testMesh$graph$tv
  
  # Create a grid of points over the study area for interpolation
  ext <- terra::ext(covs)
  centers <- expand.grid(seq(ext[1], ext[2],length.out= 200),seq(ext[3], ext[4],length.out= 100)) 
  names(centers) <- c('x','y')
  # Convert to data.frame
  centers_df <- as.data.frame(centers)
  # Convert to sf object
  study_area <- st_as_sf(centers_df, coords = c("x", "y"), crs = crs(covs)) %>% 
    # remove points outside of shape
    st_crop(PA)
  grid_points <- st_coordinates(study_area) 
  
  # replace NAs
  vertices$elevation[is.na(vertices$elevation)] <- 0
  vertices$canopy[is.na(vertices$canopy)] <- 0
  
  ##2D barycentric interpolation at points Xi for a function with values f measured at locations X
  #For N-D interpolation simply replace tsearch with tsearchn and modify the sparse matrix definition to have non-zero values in the right spots.
  interp.barycentric <- function(X,f,Xi){
    dn <- delaunayn(X)
    tri <- tsearch(X[,1],X[,2],dn,Xi[,1],Xi[,2],bary=T)
    #For each line in Xi, defines which points in X contribute to the interpolation
    active <- dn[tri$idx,]
    # Filter out NAs from tri$idx and active
    valid_idx <- is.na(tri$idx)
    active[valid_idx, ] <- 1
    tri$p[valid_idx, ] <- 1
    
    # Define the interpolation as a sparse matrix operation
    M <- sparseMatrix(i = rep(1:nrow(Xi), each = 3), j = as.numeric(t(active)), x = as.numeric(t(tri$p)), dims = c(nrow(Xi), length(f)))
    as.numeric(M %*% f)
  }
  
  # Interpolate elevation values
  interpolated_elevation <- interp.barycentric(as.matrix(vertices[, c("x", "y")]), vertices$elevation, grid_points)
  
  # Interpolate canopy values
  interpolated_canopy <- interp.barycentric(as.matrix(vertices[, c("x", "y")]), vertices$canopy, grid_points)
  
  # Combine the interpolated points with the values
  interpolated_df <- data.frame(
    x = grid_points[, 1],
    y = grid_points[, 2],
    elevation = interpolated_elevation,
    canopy = interpolated_canopy
  )
  
  # Convert to sf object
  interpolated_sf <- st_as_sf(interpolated_df, coords = c("x", "y"), crs = st_crs(covariates))
}

## plot interpolated covariates
{
  # Plot observed & interpolated elevation
  p1obs <- ggplot() + geom_spatraster(data = covs$elevation) + 
        labs(title = "Observed Elevation")
  p1int <- ggplot(interpolated_df) +
    geom_tile(aes(x = x, y = y, fill = elevation)) +
    labs(title = "Interpolated Elevation", fill = "Elevation")
  # Plot observed & interpolated canopy 
  p2obs <- ggplot() + geom_spatraster(data = covs$canopy) + 
        labs(title = "Observed Canopy")
  p2int <- ggplot(interpolated_df) +
    geom_tile(aes(x = x, y = y, fill = canopy)) +
    labs(title = "Interpolated Canopy", fill = "Canopy")
  
}

# Display plots side by side
p1obs + p1int + 
  p2obs + p2int & 
  scale_fill_viridis_c() 
```
The plots on the left are the covariates as inputted in the model, and the plots on the right show the covariates as linearly interpolated via the mesh. Ideally, we want the interpolated mesh to resemble the observed covariates. From the initial fit, we can see that elevation is somewhat accurately reflected, however, due to the greater degree of spatial variation in the canopy cover, there is a bigger mismatch with the interpolated values. There are two ways to try to improve this. First, we can increase the resolution of the mesh by decreasing the first value of the `max.edge` argument in `inla.mesh.2d()`. Unfortunately, this finer mesh can drastically increase the computation time, and may be overkill if it is already finer than the spatial structure of the species intensity. The second option is to decrease the resolution of the covariates using `terra::aggregate()`; the `fact` argument represents the number of cells in each direction (horizontally and vertically) that are summarised together using the function defined by the `fun` argument (`"mean"` in the code above). Experiment with changing the mesh resolution and raster aggregation to see the effect on the interpolated covariates.

These visualizations help us understand the spatial patterns of our environmental covariates and how well they're represented by our mesh structure. This is important because the accuracy of our species distribution predictions will depend partly on how well we capture environmental variation across the landscape.