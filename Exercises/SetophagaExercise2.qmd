---
title: "SetophagaExercise"
author: "Bob O'Hara"
date: "`r Sys.Date()`"
bibliography: '`r system.file("References.bib", package="PointedSDMs")`'
biblio-style: authoryear
format: html
---


# Introduction

In the first exercise you went through the steps to building an integrated model. Now we will look at the steps in a bit more detail. We will also improve the models after they have been set up (e.g. changing priors, changing the model), and look at how to evaluate how well the model fits the data.

## *Setophaga* example

We will continue with the *Setophaga* data. As before, we will start by modelling the Black-throated blue warbler, *Setophaga caerulescens*. 

### Model preparations

The first step in our analysis is to load in the packages required.

```{r Load packages}
#| message: false

##Install if need be: you will need v2.0
# devtools::install_github(‘PhilipMostert/PointedSDMs@main’)
library(PointedSDMs)

library(INLA)
 library(ggmap)
library(terra)

```


A reminder, we have the following data:

- a map of Pennsylvania
- eBird: data for 3 species
- BBS: North American breeding bird survey data
- BBA: Pennsylvania Breeding Bird Atlas
- elevation: Elevation. Height above sea level. Probably sea level at low tide nowadays.
- canopy: canopy cover (a proxy for forest)


First we will go through the steps of importing the data. You may already have done this.


```{r Map of PA}
#| code-fold: true
#| code-summary: The code to import the data is here
# Map boundary
# if you need to download the package, you have to get it gtom GitHub
# devtools::install_github("ropensci/USAboundaries")
proj <- "+proj=utm +zone=17 +datum=WGS84 +units=km"
PA <- USAboundaries::us_states(states = "Pennsylvania")
PA <- st_transform(PA, proj)

# Species data
Data <- readRDS("../Data/Vignette_setophaga/SetophagaData.rds") 
SetohagaData <- sapply(unique(Data$eBird$Species_name), function(sp, data) {
  res <- list(
    ebird = data$eBird[data$eBird$Species_name==sp,],
    BBA = data$BBA[data$BBA$Species_name==sp,],
    BBS = data$BBS[data$BBS$Species_name==sp,]
  )
  res
}, data=Data, simplify=FALSE)


# Covariate data
covariates <- scale(terra::rast(system.file('extdata/SetophagaCovariates.tif', 
                                      package = "PointedSDMs")))
names(covariates) <- c('elevation', 'canopy')
covariates$elevation_ebird <- covariates$elevation # we will use this later...
# plot(covariates)

```

Now we have the data in several datasets. Next we need to integrate it into a common format that PointedSDMs can use. We need to pass it a few things:

- the boundary of the region
- a mesh
- each data set
- any covariates

We have the boundary (`PA`). For this and several other components we also need the projection (`proj`): to over-simplify, this tells us what units our our coordinates are in (with the added problem that our measurements aren't Euclidean, because they are on a globe). Our species data re in `SetohagaData`, and our covaraites are in `covariates`.

We also need a mesh. We need this because we are calculating intensities all over our region. This is continuous, so we need to disctretise it in some way. We could split the region into pixels, but a mesh is more efficient.

## Designing a mesh

Designing a good mesh is a dark art, that we are not sure anyone really understands. Fortunately Pennsylvania is a simple shape, so the mesh is not too complicated. Thanks to Slartibartfast's efforts, it is more difficult to get a good mesh for crinkly countries like Norway. 

```{r MeshBIG}
#| echo: true
#| code-fold: true
#| code-summary: Code for big mesh


 meshBIG <- inla.mesh.2d(boundary = inla.sp2segment(PA), 
                      cutoff = 0.2 * 5,
                      max.edge = c(0.1, 0.24) * 40, #120
                      offset = c(0.1, 0.4) * 100,
                      crs = st_crs(proj))
```

```{r Mesh}
#| warning: false
#| message: false
#| fig.width: 8
#| fig.height: 5

mesh <- inla.mesh.2d(boundary = inla.sp2segment(PA), 
                     cutoff = 10 * 5,
                     max.edge = c(1, 1.24) * 40, #120
                     offset = c(0.05, 0.4) * 100,
                     crs = st_crs(proj))

# mesh <- inla.mesh.2d(boundary = inla.sp2segment(PA), 
#                      cutoff = 5 * 5,
#                      max.edge = c(0.1, 0.74) * 40, #120
#                      offset = c(0.1, 0.4) * 100,
#                      crs = st_crs(proj))

mesh_plot <- ggplot() +
             gg(mesh) +
             ggtitle('Plot of mesh') +
             theme_bw() +
             theme(plot.title = element_text(hjust = 0.5))
mesh_plot

```

Our coarse mesh is OK, and has `r mesh$n` points in it. We also have a big mesh with `r meshBIG$n` points, which takes longer to run but produces better results. We would suggest you wait until after the workshop to try it (it only takes a few minutes, but will be annoying if we start another exercise whilst you're waiting.

## Integrating the data

Now we organise our species data with `startISDM()`:

```{r}
#| eval: true

# These make the model fitting more stable
modelOptions <- list(control.inla = list(int.strategy = 'eb', diagonal = 0.1), 
                      verbose = FALSE, safe = TRUE)

caerulescensModel <- startISDM(SetohagaData$Setophaga_caerulescens, 
                          Boundary = PA, # a polygon of the boundary
                          Projection = proj, # the geographical projection
                          Mesh = mesh, # the mesh, which we have just made
                          responsePA = 'NPres', # Name of response for binomial data
                          trialsPA = 'Trials', # Name of no. of trials for binomial data
                          spatialCovariates = covariates, # Environmental covariates
                          Formulas = list(covariateFormula = ~ elevation + canopy)
)

caerulescensEst <- fitISDM(data = caerulescensModel)

```

The `startISDM()` function is used to put the pieces together. In essence, we provide it with this information:

- the different data sets
- the mesh and boundary (to define the area we are modelling)
- which data columns are counts or presence/absence (i.e. what are the likelihoods for these data).

But we can also provide more: above we add a `Formulas` list. The model in the first exercise assumed that the covariates had linear effects, but here we also add quadratic terms. 

Once we have this set up, we can edit the model to change things like priors, and add different terms.

# Improving the model

We can change the model in a few ways. Both the process model (i.e. the distribution model) and the different observation models can be changed. And each can, of course be changed in different ways

If you need help with the object you create, you can get some here:

```{r help}
#| eval: false
caerulescensModel$help()
```

(it is an R6 class, so the syntax is a bit different to what you might be used to)

## Improving the Process model

### Adding spatial terms

We can add and modify spatial terms with `.$specifySpatial`. For example, if we want to change the spatial effect on the actual distribution (i.e. the residual spatial field), we can do it like this:


```{r specifySpatial}

caerulescensModel$specifySpatial(sharedSpatial = TRUE,
                                 prior.sigma = c(1, 0.1),  # P(sigma > 1) = 0.1
                                 prior.range = c(1, 0.1)) # P(range < 15) = 0.1
caerulescensEst <- fitISDM(data = caerulescensModel)
```

First, note that this changes the `caerulescensModel` object (so is different to classical R syntax). The `prior.sigma`and `prior.range` are parameters for a PC prior. We will sidestep what their details for now, but [good introductions are available](https://becarioprecario.bitbucket.io/inla-gitbook/ch-priors.html#sec:pcpriors). 

### Priors for fixed effects:`.$priorsFixed`

Suppose we knew *a priori* what the mean and precision values of one of the fixed terms for a given species was: we could add this knowledge to the model using the `.$priorsFixed` function.

```{r priorsFixedProcess}

caerulescensModel$priorsFixed(Effect = 'elevation',
                              mean.linear = -5, 
                              prec.linear = 10)

caerulescensEst <- fitISDM(data = caerulescensModel, 
                   options = modelOptions)
summary(caerulescensEst)$fixed

```

The prior here is ridiculously tight, but we can see that it does affect the posterior.

## Formula

We can also update the formula, to change the model. For example, here we add a quadratic effect of elevation.

```{r FormulaProcess}
#| eval: false

caerulescensModel$updateFormula(???, 
                              Formula = . ~ . + I(elevation^2))

caerulescensEst <- fitISDM(data = caerulescensModel, 
                   options = modelOptions)
summary(caerulescensEst)$fixed

```

## Observation Process: individual data sets

We can also change the model of the observation process for each data set, or share parts of the model across more than one data set.

## Spatial bias

A well known problem with people is that they don't collect data according to well designed experimental protocols. With citizen science data, such as eBird, we want to correct for spatial biases in where people collect. We can add covaraites to model this bias, but here we will model the bias with a spatial field, something which seems to work surprisingly well [@simmonds2020more]. We can add it to the model like this:

First we add a bias field, with `$addBias()`. We could fit the model at that point, but then we change the prior to a PC prior.

```{r bias fields}
#| eval: true
caerulescensModel$help() # use this to see what data sets are available, and what their names are

caerulescensModel$addBias(datasetNames = 'ebird')

caerulescensModel$specifySpatial(Bias = TRUE, # Change the prior
                                 prior.sigma = c(0.1, 0.1),
                                 prior.range = c(15, 0.1))

 
caerulescensEst <- fitISDM(data = caerulescensModel, 
                    options = modelOptions)

summary(caerulescensEst)$hyper

```



If we want to model the observation process for a data set, we can do that by changing the formula for the dataset. For example, we might think that birders in Pennsylvania don't like heights (if they did, they would be in Colorado, after all), and add elevation as a covarate:

```{r AddEbirdCovariate}
#| eval: true

# This does not seem to be working!!!!!
caerulescensModel$updateFormula(data='ebird',
                              Formula = ~ . + elevation_ebird)

caerulescensEst <- fitISDM(data = caerulescensModel, 
                   options = modelOptions)
summary(caerulescensEst)$fixed

```

This model might seem slightly strange: we have elevation as a process model, but also in one of the observation models. We can do this in this case because we have multiple data sets: the information about the effect of elevation on the actual distribution come from the other data sets.

##### Model evaluation

*PointedSDMs* has two functions to functions to evaluate models. These are `blockedCV` and `datasetOut` Both do cross- validation, but in different ways. 

- `blockedCV` does block cross-validation,  by removing blocks from the training data, and using them as test data. 
- `datasetOut` drops each data set, and then tests on it.

###### Block Cross validation

`.$spatialBlock` is used to set up spatial blocked cross-validation for the model by assigning each point in the datasets a block based on where the point is located spatially. For this example, we chose four blocks (`k=2`) for our model, based around a 2x2 grid (`rows = 2, cols = 2`). See the figure below for an illustration of the spatial block: the amount of data within each block appears reasonably equal.

```{r spatialBlock, warning = FALSE, message = FALSE,  fig.width=8, fig.height=5}

caerulescensModel$spatialBlock(k = 5, rows_cols = c(2, 2), plot = TRUE) + theme_bw()

```


The blocked model may then be estimated with `blockedCV`. Note that this will estimate `k` models, so it may take a while to complete. Plus, with this ecample it falls apart.

```{r blockedCV, warning = FALSE, eval = FALSE}
# this gives lots of warnings
spatialBlocked <- blockedCV(data = caerulescensModel, 
                            options = modelOptions)
spatialBlocked
```


More so, we can compare the cross-validation score from this model to one without the shared spatial effect (specified with `pointsSpatial = FALSE` in `startISDM`).

```{r No fields model, message = FALSE, warning = FALSE}

caerulescens_no_fields <- startISDM(SetohagaData$Setophaga_caerulescens, 
                      pointsSpatial = NULL,
                          Boundary = PA, # a polygon of the boundary
                          Projection = proj, # the geographical projection
                          Mesh = mesh, # the mesh, which we have just made
                          responsePA = 'NPres', # Name of response for binomial data
                          trialsPA = 'Trials', # Name of no. of trials for binomial data
                          spatialCovariates = covariates, # Environmental covariates
                          Formulas = list(covariateFormula = ~ elevation + canopy)
)

caerulescens_no_fields_model <- fitISDM(data = caerulescens_no_fields)

caerulescens_no_fields$spatialBlock(k = 2, rows_cols = c(2, 2), plot = TRUE) + theme_bw()

spatialBlocked_no_fields <- blockedCV(data = caerulescens_no_fields, 
                                      options = modelOptions)
spatialBlocked_no_fields

```

Based on the DIC scores, we conclude that the model with the shared spatial field provides a better fit of the data.


##### Validation by Data set

We can also try validation by dropping a data set, fitting to the model to the other data sets and then using the dropped data set to valilate the model. We can use the `datasetOut()` function to do this.

By setting `predictions = TRUE` we are able to calculate some cross-validation score by leaving out the selected dataset, but using the predicted values as an offset in a new model, and then finding the difference between the marginal-likelihood of the full model (i.e the model with all the datasets considered) and the marginal-likelihood of the offset model.

```{r Leave one out}
#| message: false 
#| warning: false

dataset_out <- datasetOut(model = caerulescensEst,
                          dataset = "BBA",
                          predictions = TRUE)
dataset_out

```

Note that this is not stable, thanks to the mesh.



# Your turn

Now we can try the same analysis with a different species. These are the steps you need to take:

1. download the species data
1. download the covariate data
1. make a mesh (you will ned a boundary)
1. organise the data with `startISDM()`
1. fit the model to the data with `fitISDM()`
1. Plot the predictions

We will help you with the first couple of steps. Here is the first model for the magnolia

```{r Load data 2}
#| eval: true

magnoliaData <- SetohagaData$Setophaga_magnolia

magnoliaModel <- startISDM(SetohagaData$Setophaga_magnolia, # the data
                               Boundary = PA, # a polygon of the boundary
                               Projection = proj, # the geographical projection
                               Mesh = mesh, # the mesh, which we have just made
                               responsePA = 'NPres', # Name of response for binomial data
                               trialsPA = 'Trials', # Name of no. of trials for binomial data
                               spatialCovariates = covariates # Environmental covariates
)

magnoliaEst <- fitISDM(data = magnoliaModel, options = modelOptions)

# we will use this soon
magnoliaModel$spatialBlock(k = 5, rows_cols = c(2, 2), plot = TRUE) + theme_bw()


```


```{r Load data 3}
#| eval: true
#| code-fold: true
#| code-summary: If you want to see the code for S. fusca, it is here.
#| collapse: true

fuscaData <- SetohagaData$Setophaga_fusca

fuscaModel <- startISDM(SetohagaData$Setophaga_fusca, # the data
                               Boundary = PA, # a polygon of the boundary
                               Projection = proj, # the geographical projection
                               Mesh = mesh, # the mesh, which we have just made
                               responsePA = 'NPres', # Name of response for binomial data
                               trialsPA = 'Trials', # Name of no. of trials for binomial data
                               spatialCovariates = covariates # Environmental covariates
)

fuscaEst <- fitISDM(data = fuscaModel, options = modelOptions)

# we will use this soon
fuscaModel$spatialBlock(k = 5, rows_cols = c(2, 2), plot = TRUE) + theme_bw()


```



1. are quadratic effects worth adding?

```{r FormulaProcessmagnolia}
#| eval: false
#| code-fold: true
#| code-summary: Well, are they?
#| collapse: true

magnoliaModel$updateFormula(???, 
                              Formula = . ~ . + I(elevation^2))

magnoliaEst <- fitISDM(data = caerulescensModel, 
                   options = modelOptions)
summary(magnoliaEst)$fixed

```


2. Should we add a bias field?



```{r BiasMagnolia}
#| code-fold: true
#| code-summary: Here is the code for the Magnolia analysis
#| collapse: true
# first do the block CV on the original model
magnoliaBlocked <- blockedCV(data = magnoliaModel, options = modelOptions)

# now add the spatial bias term
magnoliaModel$help() # use this to see what data sets are available, and what their names are
magnoliaModel$addBias(datasetNames = 'ebird')
magnoliaModel$specifySpatial(Bias = TRUE, # Change the prior
                                 prior.sigma = c(0.1, 0.1),
                                 prior.range = c(15, 0.1))
magnoliaEstBias <- fitISDM(data = magnoliaModel, 
                    options = modelOptions)

magnoliaBlockedBias <- blockedCV(data = magnoliaModel, options = modelOptions)

magnoliaBlocked
magnoliaBlockedBias

```


```{r BiasFusca}
#| code-fold: true
#| code-summary: Here is the code for the fusca analysis
#| collapse: true
# first do the block CV on the original model
fuscaBlocked <- blockedCV(data = fuscaModel, options = modelOptions)

# now add the spatial bias term
fuscaModel$help() # use this to see what data sets are available, and what their names are
fuscaModel$addBias(datasetNames = 'ebird')
fuscaModel$specifySpatial(Bias = TRUE, # Change the prior
                                 prior.sigma = c(0.1, 0.1),
                                 prior.range = c(15, 0.1))
fuscaEstBias <- fitISDM(data = fuscaModel, 
                    options = modelOptions)

fuscaBlockedBias <- blockedCV(data = fuscaModel, options = modelOptions)

fuscaBlocked
fuscaBlockedBias

```



<details><summary><span style="color:blue">Hint</span></summary> </details>

<details><summary><span style="color:red">Answer</span></summary> </details>


